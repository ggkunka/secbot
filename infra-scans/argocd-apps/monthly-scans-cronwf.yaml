apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: monthly-security-scans
  namespace: security-scans
spec:
  # 04:00 AM on the 1st of every month
  schedule: "0 4 1 * *"
  timezone: "Asia/Kolkata"
  concurrencyPolicy: Replace         # donâ€™t queue up overlapping runs
  successfulJobsHistoryLimit: 3     # keep last 3 successes
  failedJobsHistoryLimit: 1         # keep last failure
  ttlStrategy:                       # auto-cleanup finished Workflow objects
    secondsAfterFinished: 3600      # garbage-collect 1 hour after run

  workflowSpec:
    serviceAccountName: scan-runner-sa
    entrypoint: run-all-scans

    # PVC to hold all JSON/HTML reports
    volumeClaimTemplates:
      - metadata:
          name: reports-pvc
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi

    templates:
      - name: run-all-scans
        dag:
          tasks:
            - name: kube-bench
              template: kube-bench-job
            - name: anchore
              dependencies: [kube-bench]
              template: anchore-job
            - name: falco
              dependencies: [anchore]
              template: falco-job
            - name: nessus
              dependencies: [falco]
              template: nessus-job
            - name: invicti
              dependencies: [nessus]
              template: invicti-job
            - name: pentest
              dependencies: [invicti]
              template: pentest-job

      - name: kube-bench-job
        container:
          image: aquasec/kube-bench:latest
          imagePullPolicy: Always
          args:
            - "--json"
            - "--output"
            - "/reports/kube-bench-{{workflow.creationTimestamp}}.json"
          volumeMounts:
            - name: reports-pvc
              mountPath: /reports

      - name: anchore-job
        container:
          image: anchore/cli:latest
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args:
            - |
              anchore-cli --u $ANCH_USER --p $ANCH_PASS \
                image add my-registry/app:latest &&
              anchore-cli image wait my-registry/app:latest &&
              anchore-cli image vuln my-registry/app:latest all \
                > /reports/anchore-{{workflow.creationTimestamp}}.json
          volumeMounts:
            - name: reports-pvc
              mountPath: /reports
        env:
          - name: ANCH_USER
            valueFrom:
              secretKeyRef:
                name: anchore-credentials
                key: user
          - name: ANCH_PASS
            valueFrom:
              secretKeyRef:
                name: anchore-credentials
                key: pass

      - name: falco-job
        container:
          image: falcosecurity/falco:latest
          imagePullPolicy: Always
          args:
            - "--driver"
            - "json"
            - "--json-output"
          volumeMounts:
            - name: reports-pvc
              mountPath: /reports
        # Falco writes JSON to stdout; configure it to drop its output under /reports if needed

      - name: nessus-job
        container:
          image: tenable/nessus:latest
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args:
            - |
              nessuscli --host $NESSUS_HOST --username $NESSUS_USER --password $NESSUS_PASS \
                --scan-policy 'K8s-Vuln' \
                --target my-registry/app:latest \
                --format html \
                --output /reports/nessus-{{workflow.creationTimestamp}}.html
          volumeMounts:
            - name: reports-pvc
              mountPath: /reports
        env:
          - name: NESSUS_HOST
            valueFrom:
              secretKeyRef:
                name: nessus-credentials
                key: host
          - name: NESSUS_USER
            valueFrom:
              secretKeyRef:
                name: nessus-credentials
                key: user
          - name: NESSUS_PASS
            valueFrom:
              secretKeyRef:
                name: nessus-credentials
                key: pass

      - name: invicti-job
        container:
          image: your-org/invicti-scanner:latest
          imagePullPolicy: Always
          args:
            - "--target=https://app.example.com"
            - "--output=/reports/invicti-{{workflow.creationTimestamp}}.json"
          volumeMounts:
            - name: reports-pvc
              mountPath: /reports

      - name: pentest-job
        container:
          image: instrumentisto/nmap:latest
          imagePullPolicy: Always
          args:
            - "-sV"
            - "app-service.security-scans.svc.cluster.local"
          volumeMounts:
            - name: reports-pvc
              mountPath: /reports
        # You could chain a second task here with hping/t50 for DoS if desired
