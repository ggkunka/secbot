apiVersion: batch/v1
kind: Job
metadata:
  name: anchore-scan
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: scan-runner-sa
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | indent 8 }}
      containers:
        - name: anchore-cli
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Log in to Docker registry (Harbor, Artifactory, etc.)
              echo "$REGISTRY_PASSWORD" | docker login $REGISTRY_URL -u "$REGISTRY_USER" --password-stdin &&
              # Use Anchore CLI to pull and scan image
              anchore-cli --u {{ .Values.anchore.user }} --p {{ .Values.anchore.password }} \
                --url {{ .Values.anchore.endpoint }} image add $TARGET_IMAGE &&
              anchore-cli image wait $TARGET_IMAGE &&
              anchore-cli image vuln $TARGET_IMAGE all \
                > /reports/anchore-$(date +"%Y-%m-%d").json
          env:
            - name: REGISTRY_URL
              value: "harbor-harbor-core.ncms.svc/cfxztstenant"
            - name: REGISTRY_USER
              valueFrom:
                secretKeyRef:
                  name: registry-credentials
                  key: username
            - name: REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-credentials
                  key: password
            - name: TARGET_IMAGE
              value: "harbor-harbor-core.ncms.svc/cfxztstenant/corepaas-docker-local.artifactory-blr1.int.net.nokia.com/dnt-sa-timescaledb:latest"
            {{- if .Values.global.proxy.enabled }}
            - name: HTTP_PROXY
              value: "{{ .Values.global.proxy.httpProxy }}"
            - name: HTTPS_PROXY
              value: "{{ .Values.global.proxy.httpsProxy }}"
            - name: NO_PROXY
              value: "{{ .Values.global.proxy.noProxy }}"
            {{- end }}
          volumeMounts:
            - name: reports
              mountPath: /reports
      restartPolicy: Never
      volumes:
        - name: reports
          persistentVolumeClaim:
            claimName: scan-reports-pvc
